{"version":3,"sources":["webpack:///./node_modules/corporate-ui/dist/esm/c-icon.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAgG;;AAEhG;AACA;AACA,QAAQ,2DAAgB;AACxB;AACA,6BAA6B,UAAU;AACvC,4BAA4B,2DAAU;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,2DAAC;AACjC,YAAY,2DAAC,SAAS,sDAAsD,gBAAgB,GAAG,iBAAiB,GAAG,EAAE,2DAAC,UAAU,gDAAgD;AAChL;AACA;AACA,cAAc,QAAQ,2DAAU,OAAO;AACvC,2BAA2B;AAC3B;AACA;AACA,MAAM;AACN,wBAAwB,gBAAgB,4BAA4B,GAAG,sDAAsD,mCAAmC,2BAA2B,GAAG,WAAW,0BAA0B,2BAA2B,mBAAmB,GAAG,aAAa,gBAAgB,eAAe,uBAAuB,GAAG,EAAE;AAC5V;;AAE0B","file":"7-es2015.js","sourcesContent":["import { r as registerInstance, d as getContext, h, c as getElement } from './core-7b39e2be.js';\n\nconst Icon = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.name = 'question';\r\n        this.currentTheme = { icons: {}, components: [] };\r\n        this.ContextStore = getContext(this, \"store\");\r\n    }\r\n    setTheme() {\r\n        this.theme = this.store.getState().theme.current;\r\n        this.setIcon();\r\n    }\r\n    setIcon(name = this.name) {\r\n        const items = this.store.getState().theme.items[this.theme].icons;\r\n        // TODO: We should have the default icon being a simple\r\n        // square instead of first icon in the collection\r\n        this.icon = items[name] || items.question || items[Object.keys(items)[0]] || { width: 0, height: 0 };\r\n    }\r\n    componentWillLoad() {\r\n        this.store = this.ContextStore || window.CorporateUi.store;\r\n        this.theme = this.store.getState().theme.current;\r\n        this.currentTheme = this.store.getState().theme[this.theme];\r\n        this.setIcon();\r\n        this.store.subscribe(() => {\r\n            this.theme = this.store.getState().theme.current;\r\n            this.currentTheme = this.store.getState().theme[this.theme];\r\n        });\r\n        if (!(this.el && this.el.nodeName))\r\n            return;\r\n        this.tagName = this.el.nodeName.toLowerCase();\r\n    }\r\n    render() {\r\n        return [\r\n            this.currentTheme ? h(\"style\", null, this.currentTheme.components[this.tagName]) : '',\r\n            h(\"svg\", { xmlns: 'http://www.w3.org/2000/svg', viewBox: `0 0 ${this.icon.width} ${this.icon.height}` }, h(\"path\", { fill: 'currentColor', d: this.icon.definition })),\r\n        ];\r\n    }\r\n    get el() { return getElement(this); }\r\n    static get watchers() { return {\r\n        \"theme\": [\"setTheme\"],\r\n        \"name\": [\"setIcon\"]\r\n    }; }\r\n    static get style() { return \":host {\\n  display: Var(--display);\\n}\\n:host,\\n:host *,\\n:host *::before,\\n:host *::after {\\n  -webkit-box-sizing: border-box;\\n  box-sizing: border-box;\\n}\\n\\n:host {\\n  display: inline-block;\\n  vertical-align: middle;\\n  line-height: 0;\\n}\\n:host svg {\\n  height: 1em;\\n  width: 1em;\\n  fill: currentColor;\\n}\"; }\r\n};\n\nexport { Icon as c_icon };\n"],"sourceRoot":""}